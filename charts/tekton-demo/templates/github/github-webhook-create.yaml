---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: {{ .Values.application.name }}-create-webhook
  namespace: {{ .Values.application.environments.cicd }}
spec:
  params:
  - name: ExternalDomain
    description: "The external domain for the EventListener e.g. `$(inputs.params.EventListenerName).<PROXYIP>.nip.io`"
  - name: GitHubUser
    description: "The GitHub user"
  - name: GitHubRepo
    description: "The GitHub repo where the webhook will be created"
  - name: GitHubOrg
    description: "The GitHub organization where the webhook will be created"
  - name: GitHubSecretName
    description: "The Secret name for GitHub access token. This is always mounted and must exist"
  - name: GitHubAccessTokenKey
    description: "The GitHub access token key name"
  - name: GitHubSecretStringKey
    description: "The GitHub secret string key name"
  - name: GitHubDomain
    description: "The GitHub domain. Override for GitHub Enterprise"
    default: "github.com"
  - name: WebhookEvents
    description: "List of events the webhook will send notifications for"
    default: '[\"push\",\"pull_request\"]'
  volumes:
  - name: {{ .Values.pipeline.webhook.github.secret }}
    secret:
      secretName: $(inputs.params.GitHubSecretName)
  - name: {{ .Values.pipeline.webhook.github.key }}
    secret:
      secretName: {{ .Values.pipeline.webhook.github.key }}

  steps:
  - name: create-webhook
    image: registry.redhat.io/openshift4/ose-cli:latest
    volumeMounts:
    - name: {{ .Values.pipeline.webhook.github.secret }}
      mountPath: /var/secret
    command:
    - sh
    args:
    - -ce
    - |
      set -e
      echo "Create Webhook"
      if [ $(inputs.params.GitHubDomain) = "github.com" ];then
        curl -v -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"$(inputs.params.ExternalDomain)\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://api.github.com/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      else
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"$(inputs.params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"1\" ,\"secret\": \"$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey)) -L https://$(inputs.params.GitHubDomain)/api/v3/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      fi

  - name: create-deployment-key
    image: registry.redhat.io/rhel8/nodejs-12
    volumeMounts:
    - name: {{ .Values.pipeline.webhook.github.secret }}
      mountPath: /var/secret
    - name: {{ .Values.pipeline.webhook.github.key }}
      mountPath: /var/idrsa
    script: |
      #!/bin/sh
      ssh-keygen -y -f /var/idrsa/ssh-privatekey > ~/.ssh/id_rsa.pub
      curl \
        -i\
        -H"Authorization: token $(cat /var/secret/token)"\
        --data @- https://api.github.com/repos/{{ .Values.pipeline.webhook.github.org }}/{{ .Values.pipeline.webhook.github.repo }}/keys << EOF
          {
            "title" : "deploymentt $(date)",
            "key" : "$(cat ~/.ssh/id_rsa.pub)",
            "read_only" : false
          }