apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ .Values.application.name }}
  namespace: {{ .Values.application.environments.cicd }}
  labels:
    app: {{ .Values.application.name }}
spec:
  workspaces:
    - name: {{ .Values.application.name }}-source
      description: The git repo will be cloned onto the volume backing this workspace
    - name: {{ .Values.application.name }}-shared
      description: shared folder
  resources:
    - name: {{ .Values.application.name }}-git
      type: git
    - name: {{ .Values.application.name }}-development
      type: image
    - name: {{ .Values.application.name }}-production
      type: image
    - name: {{ .Values.application.name }}-documentation
      type: image
  params:
    - name: ref
      description: Ref of the application
    - name: revision
      description: git unique head commit id
    - name: repourl
      description: repository full name
    - name: repofullname
      description: repository full name
    - name: author
      description: commit author username
    - name: email
      description: commit author email
    - name: message
      description: commit message

  tasks:

    - name: git
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: {{ .Values.application.name }}-source
      params:
      - name: verbose
        value: "false"
      - name: url
        value: $(params.repourl)
      - name: revision
        value: $(params.revision)
      - name: ref
        value: $(params.ref)
      - name: repourl
        value: $(params.repourl)
      - name: repofullname
        value: $(params.repofullname)
      - name: author
        value: $(params.author)
      - name: message
        value: $(params.message)
      - name: pipelinerun
        value: $(context.pipelineRun.name)

    - name: prepare
      taskRef:
        name: prepare
      retries: 2
      workspaces:
      - name: shared
        workspace: {{ .Values.application.name }}-shared

    - name: github
      taskRef:
        name: github
      params:
      - name: status
        value: pending
      - name: revision
        value: $(params.revision)
      - name: repourl
        value: $(params.repourl)
      - name: repofullname
        value: $(params.repofullname)

    - name: standards
      taskRef:
        name: standards
      retries: 2
      runAfter:
        - git
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      - name: shared
        workspace: {{ .Values.application.name }}-shared
      params:
        - name: ref
          value: $(tasks.git.results.ref)
        - name: repourl
          value: $(params.repourl)
        - name: repofullname
          value: $(params.repofullname)
        - name: revision
          value: $(tasks.git.results.revision)
        - name: revision-type
          value: $(tasks.git.results.revision-type)
        - name: revision-name
          value: $(tasks.git.results.revision-name)

    - name: docs
      taskRef:
        name: docs
      runAfter:
        - standards
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      params:
        - name: ref
          value: $(tasks.git.results.ref)
        - name: repourl
          value: $(params.repourl)
        - name: repofullname
          value: $(params.repofullname)
        - name: revision
          value: $(tasks.git.results.revision)
        - name: revision-type
          value: $(tasks.git.results.revision-type)
        - name: revision-name
          value: $(tasks.git.results.revision-name)
        - name: author
          value: $(tasks.git.results.author)

    - name: build
      taskRef:
        name: build
      runAfter:
        - standards
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      params:
        - name: ref
          value: $(tasks.git.results.ref)
        - name: repourl
          value: $(params.repourl)
        - name: repofullname
          value: $(params.repofullname)
        - name: revision
          value: $(tasks.git.results.revision)
        - name: revision-type
          value: $(tasks.git.results.revision-type)
        - name: revision-name
          value: $(tasks.git.results.revision-name)

    - name: deploy
      taskRef:
        name: deploy
      runAfter:
        - docs
        - build
      params:
        - name: cluster
          value: {{ .Values.cluster }}
        - name: ref
          value: $(tasks.git.results.ref)
        - name: revision
          value: $(tasks.git.results.revision)
        - name: revision-short
          value: $(tasks.git.results.revision-short)
        - name: revision-type
          value: $(tasks.git.results.revision-type)
        - name: revision-name
          value: $(tasks.git.results.revision-name)
          
    - name: test-stress
      taskRef:
        name: test-performance
      runAfter:
        - deploy
        - apply
      params:
      - name: ref
        value: $(params.ref)
      - name: repourl
        value: $(params.repourl)
      - name: repofullname
        value: $(params.repofullname)
      - name: revision
        value: $(params.revision)
      - name: revision-type
        value: $(tasks.git.results.revision-type)
      - name: revision-name
        value: $(tasks.git.results.revision-name)

    - name: test-e2e
      taskRef:
        name: test-integration
      runAfter:
        - deploy
        - apply
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      params:
      - name: ref
        value: $(params.ref)
      - name: repourl
        value: $(params.repourl)
      - name: repofullname
        value: $(params.repofullname)
      - name: revision
        value: $(params.revision)
      - name: revision-type
        value: $(tasks.git.results.revision-type)
      - name: revision-name
        value: $(tasks.git.results.revision-name)

    - name: apply
      taskRef:
        name: apply
      runAfter:
        - docs
        - build
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      - name: shared
        workspace: {{ .Values.application.name }}-shared

    - name: promote
      conditions:
        - conditionRef: is-allowed-production
          params:
            - name: revision-type
              value: $(tasks.git.results.revision-type)
      taskRef:
        name: promote
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      - name: shared
        workspace: {{ .Values.application.name }}-shared
      runAfter:
        - test-e2e
        - test-stress
      params:
      - name: cluster
        value: {{ .Values.cluster }}
      - name: repofullname
        value: $(params.repofullname)
      - name: ref
        value: $(tasks.git.results.ref)
      - name: revision
        value: $(tasks.git.results.revision)
      - name: revision-short
        value: $(tasks.git.results.revision-short)
      - name: revision-type
        value: $(tasks.git.results.revision-type)
      - name: revision-name
        value: $(tasks.git.results.revision-name)
      - name: author
        value: $(params.author)
      - name: email
        value: $(params.email)

    - name: pull-request
      taskRef:
        name: github-pull-request
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      - name: shared
        workspace: {{ .Values.application.name }}-shared
      runAfter:
        - promote
      params:
      - name: revision-type
        value: $(tasks.git.results.revision-type)
      - name: revision-name
        value: $(tasks.git.results.revision-name)

    - name: release
      taskRef:
        name: tag
      runAfter:
        - pull-request
      workspaces:
      - name: source
        workspace: {{ .Values.application.name }}-source
      params:
      - name: author
        value: $(params.author)
      - name: email
        value: $(params.email)
      - name: revision-type
        value: $(tasks.git.results.revision-type)
      - name: revision-name
        value: $(tasks.git.results.revision-name)

  finally:
    - name: finally
      taskRef:
        name: finally
      params:
      - name: uid
        value: $(context.pipelineRun.uid)
      - name: name
        value: $(context.pipelineRun.name)
      - name: repofullname
        value: $(params.repofullname)
      - name: repourl
        value: $(params.repourl)
      workspaces:
        - name: source
          workspace: {{ .Values.application.name }}-source
        - name: shared
          workspace: {{ .Values.application.name }}-shared
